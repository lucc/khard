#compdef khard

# Zsh completion definition for khard
# Install by copying to a directory where zsh searches for completion
# functions (the $fpath array).
#
# If you, for example, put all completion functions into the folder ~/.zsh/completions you must add
# the following to your zsh main config file ~/.zshrc:
#   fpath=( $HOME/.zsh/completions $fpath )
#   autoload -U compinit
#   compinit
#
# More information at http://is.muni.cz/www/xsiska2/2014/08/05/generating-completing-functions.html


# Define a helper function to complete addressbook names.
function _khard_addressbook_names () {
  local expl
  _sequence _wanted addressbooks expl "addressbook" compadd - \
      ${(f)"$(_call_program addresses khard addressbooks)"}
}

local curcontext="$curcontext"
local -a state line expl
local -A opt_args
local ret=1

# Define options for the different subcommands.
local -a options
options=(
  '(- *)'{-h,--help}'[show a short help message]'
)

# First handle global options.  Everything that does not match a global option
# as defined here is handled later.  The $state is set to "subcommand" or
# "options" in order to do that.
_arguments -C -s \
  $options \
  '(- *)'{-v,--version}'[show version information]' \
  '(-d)'{-d,--debug}'[enable debug output]' \
  ':subcommand:->subcommand' \
  '*::options:->options' && ret=0

case $state in
  subcommand)
    # Define an array with the subcommands and the description.
    local -a subcommands_array
    subcommands_array=(
      'list:list matching contacts'
      'details:show details for a contact'
      'export:export a contact'
      'email:list email addresses of matching contacts'
      'phone:list phone numbers of matching contacts'
      'source:edit the source vcard of a contact'
      'new:add a new contact'
      'add-email:add an email address to a contact'
      'merge:merge to contacts together'
      'modify:edit a contact'
      'copy:copy a contact to another addressbook'
      'move:move a contact to another addressbook'
      'remove:delete a contact'
      'addressbooks:list available addressbooks'
    )
    # Use this array to complete the subcommands.
    _describe -t subcommands 'khard subcommands' subcommands_array && ret=0
    ;;
  options)
    # Add the addressbook option for all subcommands.
    options+=(
      '(-a)'{-a+,--addressbook=}'[specify addressbook]:addressbook:_khard_addressbook_names'
    )
    # Define different option groups.
    local -a target_abook_options input_options output_options search_options
    target_abook_options=(
      '(-A)'{-A+,--target-addressbook=}'[specify target addressbook]:addressbook:_khard_addressbook_names'
    )
    input_options=(
      '(-i)'{-i+,--input-file=}'[specify input file]:input file:_files'
    )
    output_options=(
      '(-o)'{-o+,--output-file=}'[specify output file]:output file:_files'
    )
    search_options=(
      '(-g)'{-g,--group-by-addressbook}'[group contacts table by address book]'
      '(-r)'{-r,--reverse}'[reverse order of contact table]'
      '(-s)'{-s+,--sort=}'[sort contact table]:sort by:(first_name last_name)'
      '(-u)'{-u+,--uid=}'[select contact by uid]:uid'
      '*::search terms'
    )
    curcontext="${curcontext%:*}-${words[1]}:"
    # Add the correct options for the subcommand to $options, depending on the
    # subcommand found in $word[1].
    case $words[1] in
      addressbooks) options=();;
      list|details|email|phone|source|remove) options=($search_options);;
      export) options=($output_options $search_options);;
      copy|move) options+=($target_abook_options $search_options);;
      add-email) options+=($input_options);;
      modify) options+=($search_options $input_options);;
      merge)
	options+=(
          '(-U)'{-U+,--target-uid=}'[select target contact by uid]:uid'
          '(-t)'{-t+,--target=}'[target contact to merge into]:search string'
          $target_abook_options
          $search_options
        )
        ;;
      new)
	options=(
	  $input_options
	  '--open-editor[Open text editor after successful creation of new contact from stdin or template]'
        )
        ;;
    esac
    # Complete the subcommand options.
    _arguments -A "-*" $options && ret=0
    ;;
esac

return ret
